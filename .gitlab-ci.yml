stages:
  - test

variables:
  PIP_CACHE_DIR: $CI_PROJECT_DIR/.pip

default:
  image: python:3
  before_script:
    - pip install --upgrade poetry
    - poetry config virtualenvs.in-project true
    - poetry update
  cache:
    key: poetry-install
    paths:
      - .venv
      - $PIP_CACHE_DIR

black:
  script:
    - poetry run black --check .

mypy:
  script:
    - poetry run mypy .

pytest:
  services:
    - name: docker:dind
      alias: docker-dind
  variables:
    DOCKER_HOST: tcp://docker-dind:2375
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends gnupg lsb-release
    - mkdir -p /etc/apt/keyrings
    - >
      curl -fsSL https://download.docker.com/linux/debian/gpg
      | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    - >
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg]
      https://download.docker.com/linux/debian $(lsb_release -cs) stable"
      | tee /etc/apt/sources.list.d/docker.list
    - apt-get update
    - apt-get install -y --no-install-recommends docker-ce-cli docker-compose-plugin
    - echo -e '#!/bin/sh\ndocker compose $@' > /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - >
      docker login
      --username "${REPORTER_REGISTRY_USERNAME}"
      --password "${REPORTER_REGISTRY_PASSWORD}"
      registry.gitlab.com
    - >
      REPORTER_HOST=docker-dind:8080 poetry run
      coverage run --source=reporter -m pytest -sv --color=yes
    - poetry run coverage report
    - poetry run coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
